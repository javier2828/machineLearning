Upload a file on blackboard called answers.pdf as well as your scripts as described in the following problems.

Problem 1 (50 Points) 

 You must implement a program that uses linear regression to fit  polynomials of degrees 1-5  to a set of training data (Training setPreview the document). 

The training set has 3 columns separated by commas. The first two columns correspond to input attributes.

The 3rd column is the output variable.

Your program should be able to ready the training data set. It will further have the following input arguments:

    The first argument is the path name of the training file, where the training data is stored. The path name can specify any file stored on the local computer.
    The second argument is the order of the polynomial. This number will be any integer in the interval [1,5]. 
    The third number is a non-negative real number (it can be zero or greater than zero). This is the value of λ that you should use for norm-two regularization. If λ = 0, then no regularization is used.

 

Once your perform linear regression and you learn the model you will test the learnt model using the following testing data set (Test setPreview the document). For testing you will use only the first two columns and try to predict the third column of the testing file. Then, you will calculate the squared-error between the actual output (value of third column in testing file) and the one your model predicted.

Your script should generate a graph that contains the training error, as well as the testing error for different values of the order or the polynomial used for fitting (all integer values within [1,5]). This graph should be generated for different regularization values

λ = 0, λ = 1, λ = 5. State for what polynomial order and what regularization value you get the best testing squared error.  Repeat this process using 2%, 10%, 50% and 100% of the training set provided.


In your answers.pdf document, provide the output produced by your program. Submit your code in a file called LS_Regression (.m or .py extension). 

Problem 2 (25 Points)  

Implement a script where you estimate the probability of a binary event using a frequentist approach. The data will be generated by your code using a specific probability distribution, but then your code will estimate that distribution based on the data that was generated. The estimated distribution will not necessarily be identical to the true distribution that was used.

First, your code a random string S whose length is 5000 characters: S = c1, c2, c5000. To generate the string S, follow these guidelines:

    Each character ci is either character 'a' or  'b'.
    Each character c should be chosen randomly, so that the prior p(c = 'a') = 0.1. To do this:
        Generate a random number, drawn from a uniform distribution between 0 and 1.
        If that random number is less than or equal to 0.1, then the character should be set to 'a'. If the random number is greater than 0.1, the character should be set to 'b'.
    You should make sure that the choice of any character is independent from the choice of any other character. 

After you generate the string S, you should estimate via the frequentist approach the probability p(c = 'a'), based on the characters of S. At the end, your code should print out the estimated probability. 

In your answers.pdf document, provide the output produced by your program. Submit your code in a file called frequentist_estimate1 (.m or .py extension). 

Problem 3 (25 Points)

Estimate a probability distribution using a Bayesian approach. Again, the data will be a string S whose characters are only 'a' and 'b' (as described in Problem 2). However:

    This time the string will be provided to your program as input.
    The length of the string can be anything.

Let p(c = 'a') = m. You are given the following prior for m:

    p(m = 0.1) = 0.9
    p(m = 0.3) = 0.04
    p(m = 0.5) = 0.03
    p(m = 0.7) = 0.02
    p(m = 0.9) = 0.01

Obviously, all other possible values of m have probability 0.

At the end, your program needs to report the posterior distribution of m given the data, as well as the computed p(c = 'a') (based on the posterior distribution of m). The program output should follow EXACTLY this format:

p(m = 0.1 | S) = Calculated Value

p(m = 0.3 | S) = Calculated Value

p(m = 0.5 | S) = Calculated Value

p(m = 0.7 | S) = Calculated Value

p(m = 0.9 | S) = Calculated Value

p(c = 'a' | S) = Calculated Value

In your answers.pdf document, provide the output produced by your program. Submit your code in a file called Bayesian_estimate1 (.m or .py extension). 
